library(dplyr)
my_db <- src_postgres(dbname="dataloop", host="localhost", user="lmillan", password="pqmld2t8")
facebook_dataloop <- tbl(my_db, "facebook_dataloop")
total.posts <- group_by(facebook_dataloop, page_id) %>%
summarise(posts=n())
class(total.posts)
total.posts
dim(total.posts)
total.posts <- as.data.frame(group_by(facebook_dataloop, page_id) %>%
summarise(posts=n()))
total.posts
ids <- data.frame(id <- c('153094742922',
'385930068106631',
'215547488473853'),
page <- c('proceso', 'newsweek', 'animal.politico'))
ids
ids <- data.frame(id=c('153094742922',
'385930068106631',
'215547488473853'),
page=c('proceso', 'newsweek', 'animal.politico'))
ids
ids <- data.frame(id=c('153094742922',
'385930068106631',
'215547488473853'),
page=c('proceso', 'newsweek.esp', 'animal.politico'))
gvisBarChart(total.posts)
library(googleVis)
gvisBarChart(total.posts)
total.posts.plot <- gvisBarChart(total.posts)
plot(total.posts.plot)
?join
total.posts
s <- inner_join(ids, total.posts, by=c("id","page_id"))
ids
s <- inner_join(ids, total.posts, by=c("id"="page_id"))
s
?gvisBarChart
class(total.posts.name)
total.posts.name <- inner_join(ids, total.posts, by=c("id"="page_id"))
class(total.posts.name)
total.posts.name <- total.posts.name[with(total.posts.name, order(-posts)), ]
total.posts.plot <- gvisBarChart(total.posts.name, xvar="page", yvar="posts")
plot(total.posts.plot)
install.packages("rjson")
install.packages("tm")
library(tm)
library(rjson)
library(dplyr)
library(stringr)
suppressPackageStartupMessages(library(tm))
suppressPackageStartupMessages(library(rjson))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(stringr))
setwd("~/itam/tesis")
source("auxiliary_functions.R")
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(tm))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
source("auxiliary_functions.R")
from.json <- function(x) {
line <- fromJSON(x)
line$internalName
}
json.tags <- read.csv("tags-catalog.json", header=F,
sep="\n", stringsAsFactors=F, quote="\'")
tags <- apply(json.tags, 1, from.json)
#cleaning tags
tags.df <- data.frame(tags=tags)
tags.df$tags <- sapply(tags.df$tags, function(x) gsub("-"," ", x=x))
tags.df$clean <- sapply(tags.df$tags, function(x) gsub("\\."," ", x=x))
tags.df$clean.unique <- sapply(tags.df$clean, function(x) eliminateDuplicated(x))
tags.unique <- unique(tags.df$clean.unique)
tags.vector.source <- VectorSource(x=tags.unique)
tags.corpus <- VCorpus(tags.vector.source,
readerControl=list(language="es"))
tags.cleaned <- cleaningCorpus(tags.corpus)
tags.cleaned.char <- character()
for(i in 1:length(tags.unique)){
tags.cleaned.char <- rbind(tags.cleaned.char, content(tags.cleaned[[i]]))
}
tags.vector.source <- VectorSource(x=tags.unique)
tags.corpus <- VCorpus(tags.vector.source,
readerControl=list(language="es"))
inspect(tags.corpus)
tags.cleaned <- cleaningCorpus(tags.corpus)
tags.cleaned.char <- character()
for(i in 1:length(tags.unique)){
tags.cleaned.char <- rbind(tags.cleaned.char, content(tags.cleaned[[i]]))
}
class(tags.cleaned)
inspect(tags.cleaned)
?tm
library(tm)
?tm_map
volatil.corpus <- tags.corpus
without_punctuation <- tm_map(volatil.corpus, removePunctuation)
without_numbers <- tm_map(without_punctuation, removeNumbers)
class(without_punctuation)
inspect(without_punctuation)
content(without_punctuation)
content(inspect(without_punctuation))
content(inspect(without_punctuation)[[1]])
without_stopwords <- tm_map(without_numbers, removeWords, stopwords("spanish"))
head(without_stopwords)
extra_whitespace <- tm_map(without_stopwords, stripWhitespace)
s_lower <- tm_map(extra_whitespace, content_transformer(tolower))
s_steam <- tm_map(s_lower, stemDocument)
?tm_map
sessionInfo()
s_steam <- steamDocument(s_lower, language=meta(s_lower, "spanish"))
s_steam <- stemDocument(s_lower, language=meta(s_lower, "spanish"))
?stemDocument
?tm_map
s_steam <- tm_map(s_lower, stemDocument(language=meta(s_lower, "spanish")))
s_steam <- tm_map(s_lower, stemDocument(s_lower, language=meta(s_lower, "spanish")))
s_steam <- tm_map(s_lower, stemDocument("spanish"))
class(ss_lower)
class(s_lower)
?tm_map
?content_transformer
s_steam <- tm_map(s_lower, content_transformer(stemDocument("spanish")))
install.packages("SnowballC")
s_steam <- tm_map(s_lower, stemDocument)
source("auxiliary_functions.R")
source("auxiliary_functions.R")
setwd("~/itam/tesis")
suppressPackageStartupMessages(library(tm))
suppressPackageStartupMessages(library(rjson))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(stringr))
source("auxiliary_functions.R")
from.json <- function(x) {
line <- fromJSON(x)
line$internalName
}
json.tags <- read.csv("tags-catalog.json", header=F,
sep="\n", stringsAsFactors=F, quote="\'")
#from json to character
tags <- apply(json.tags, 1, from.json)
#cleaning tags
tags.df <- data.frame(tags=tags)
tags.df$tags <- sapply(tags.df$tags, function(x) gsub("-"," ", x=x))
tags.df$clean <- sapply(tags.df$tags, function(x) gsub("\\."," ", x=x))
tags.df$clean.unique <- sapply(tags.df$clean, function(x) eliminateDuplicated(x))
tags.unique <- unique(tags.df$clean.unique)
tags.vector.source <- VectorSource(x=tags.unique)
tags.corpus <- VCorpus(tags.vector.source,
readerControl=list(language="es"))
tags.cleaned <- cleaningCorpus(tags.corpus)
tags.cleaned.char <- character()
for(i in 1:length(tags.unique)){
tags.cleaned.char <- rbind(tags.cleaned.char, content(tags.cleaned[[i]]))
}
unique.tags.df.cleaned <- as.character(unique(tags.cleaned.char))
tags.cleaned.source <- VectorSource(x=unique.tags.df.cleaned)
tags.cleaned.corpus <- VCorpus(tags.cleaned.source,
readerControl=list(language="es"))
tags.matrix <- TermDocumentMatrix(tags.cleaned.corpus)
tags.df.matrix <- data.frame(rownames(tags.matrix),
inspect(tags.matrix),
row.names=NULL,
stringsAsFactors=F)
names(tags.df.matrix) <- c("term",paste0("doc",colnames(tags.matrix)))
names(tags.df.matrix)
tags.df.matrix[1:4,1:4]
install.packages("shiny")
library(shiny)
suppressPackageStartupMessages(library(shiny))
runApp("shinyApp_content/")
runApp("shinyApp_content/")
runApp("shinyApp_content/")
shiny::runApp('shinyApp_content')
runApp("shinyApp_content/")
runApp("shinyApp_content/")
runApp("shinyApp_content/")
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
?textInput
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
textareaInput <- function(inputId, label, value="", placeholder="", rows=2){
tagList(
div(strong(label), style="margin-top: 5px;"),
tags$style(type="text/css", "textarea {width:100%; margin-top: 5px;}"),
tags$textarea(id = inputId, placeholder = placeholder, rows = rows, value=value))
}
runApp("shinyApp_content/")
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
library(shiny)
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
runApp("shinyApp_content/")
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shinyUI(
fluidPage(
h4("Multi-line text input test"),
HTML('<textarea id="input.content" rows="10" cols="100">Default value</textarea>')
)
)
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
titlePanel("Etiquetador de contenido editorial BM25"),
titlePanel("Etiquetador de contenido editorial BM25")
h4("Ingrese el contenido que será etiquetado")
sidebarLayout(
sidebarPanel(
tags$textarea(id="input.content", rows=15, cols=100, value="")
)
)
?sidebarPanel
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
titlePanel("Etiquetador de contenido editorial BM25")
h4("Ingrese el contenido que será etiquetado")
tags$textarea(id="input.content", rows=15, cols=100, value="")
actionButton(inputId="tag.button", label="Etiquetar")
hr()
h4("Etiquetas sugeridas")
tags$textarea(id="output.tags", rows=15, cols=40, value="")
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
runApp("shinyApp_content", display.mode = "showcase")
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
shiny::runApp('shinyApp_content')
source("../tags_manipulation.R")
setwd("~/itam/tesis/shinyApp_content")
source("../tags_manipulation.R")
head(tags.unique)
class(tags.unique)
length(tags.unique)
shiny::runApp()
shiny::runApp()
tags.unique[3480]
dim(tags.cleaned.corpus)
class(tags.cleaned.corpus)
inspect(tags.cleaned.corpus)
dim(unique.tags.df.cleaned)
class(unique.tags.df.cleaned)
length(unique.tags.df.cleaned)
unique.tags.df.cleaned[3480]
length(tags.unique)
cleaningCorpus <- function(volatil.corpus){
#eliminate punctuation
without_punctuation <- tm_map(volatil.corpus, removePunctuation)
#eliminate numbers
without_numbers <- tm_map(without_punctuation, removeNumbers)
#eliminate stopwords
without_stopwords <- tm_map(without_numbers, removeWords, stopwords("spanish"))
#eliminate extra whitespaces
extra_whitespace <- tm_map(without_stopwords, stripWhitespace)
#to lower case
s_lower <- tm_map(extra_whitespace, content_transformer(tolower))
#stem each token
#s_steam <- tm_map(s_lower, stemDocument)
#s_steam
s_lower
}
from.json <- function(x) {
line <- fromJSON(x)
line$internalName
}
json.tags <- read.csv("../tags-catalog.json", header=F,
sep="\n", stringsAsFactors=F, quote="\'")
#from json to character
tags <- apply(json.tags, 1, from.json)
tags.df <- data.frame(tags=tags)
tags.df$tags <- sapply(tags.df$tags, function(x) gsub("-"," ", x=x))
tags.df$clean <- sapply(tags.df$tags, function(x) gsub("\\."," ", x=x))
tags.df$clean.unique <- sapply(tags.df$clean, function(x) eliminateDuplicated(x))
tags.unique <- unique(tags.df$clean.unique)
tags.vector.source <- VectorSource(x=tags.unique)
tags.corpus <- VCorpus(tags.vector.source,
readerControl=list(language="es"))
tags.cleaned <- cleaningCorpus(tags.corpus)
class(tags.cleaned)
inspect(tags.claned)
inspect(tags.cleaned)
tags.cleaned.char <- character()
for(i in 1:length(tags.unique)){
tags.cleaned.char <- rbind(tags.cleaned.char, content(tags.cleaned[[i]]))
}
unique.tags.df.cleaned <- as.character(unique(tags.cleaned.char))
lenght(unique.tags.df.cleaned)
length(unique.tags.df.cleaned)
length(tags.clenead)
inspect(tags.cleaned)
length(unique.tags.df.cleaned)
unique.tags.df.cleaned[1]
shiny::runApp()
shiny::runApp()
content <- "Triste recuerdo para los 76ers de Filadelfia
Con la peor marca en la NBA, Filadelfia añora su última final disputada hace 15 años. Con Allen Iverson, Dikembe Mutombo y Aaron McKie, los 76ers completaron en la temporada 2000-01 una de sus mejores campañas en su historia.
Los números son fríos, y en Filadelfia mucho más que los 16 grados centígrados anunciados para hoy, cuando su equipo de basquetbol reciba en casa a los Hawks de Atlanta. Los milagros en el deporte ocurren pocas veces, por lo que los 76ers no clasificarán a la postemporada por cuarto año consecutivo, al ocupar el último sitio de la Conferencia Este, a 18 victorias del octavo lugar (Pacers de Indiana), con 34 partidos por disputarse.
Una gran decepción para los fanáticos de la franquicia que en 2016 cumple 70 años desde su fundación, ya que en las 14 campañas entre 1999-00 y 2011-12 (cuando cayeron en las semifinales) contó con 10 participaciones en playoffs.
A ello se suma el triste recuerdo de la última final disputada en la NBA, hace ya 15 largos años, cuando en la temporada 2000-01 lo ganaron todo, excepto lo más importante: el trofeo Larry O’Brien, con el que hubieran conquistado su cuarto campeonato.
Liderados por un sorprendente joven llamado Allen Iverson con sólo cinco años de experiencia en la liga de basquetbol estadounidense (Jugador Más Valioso de la temporada, Jugador Más Valioso del Juego de Estrellas y Máximo anotador de la liga, 31.1 puntos por partido), dirigidos por Larry Brown (Mejor entrenador del año), apoyados bajo la tabla por Dikembe Mutombo (Mejor defensor) y con Aaron McKie (Mejor sexto hombre) en la banca, los 76ers completaron una de sus mejores campañas para llevar a la institución a su novena final.
Sin embargo, ni todos los galardones de sus jugadores fueron suficiente para dar pelea a los Lakers de Los Ángeles, que de la mano de la dupla formada por Shaquille O’Neal (Jugador Más Valioso de la serie) y Kobe Bryant se hicieron del título con un contundente 4-1.
Dos años después de esta derrota, Filadelfia dejó ir a su entrenador Larry Brown, lo que dio pie a un ir y venir de, hasta ahora, seis responsables de su banquillo, incluido Brett Brown, actual coach que tiene al conjunto de Pensilvania con récord de 7 victorias, 41 derrotas (14.6% de efectividad, la segunda peor en la historia de la franquicia) y en su tercera temporada con marca perdedora con él al frente."
source("../auxiliary_functions.R")
#####################################
####tags
from.json <- function(x) {
line <- fromJSON(x)
line$internalName
}
json.tags <- read.csv("../tags-catalog.json", header=F,
sep="\n", stringsAsFactors=F, quote="\'")
#from json to character
tags <- apply(json.tags, 1, from.json)
#cleaning tags
tags.df <- data.frame(tags=tags)
tags.df$tags <- sapply(tags.df$tags, function(x) gsub("-"," ", x=x))
tags.df$clean <- sapply(tags.df$tags, function(x) gsub("\\."," ", x=x))
tags.df$clean.unique <- sapply(tags.df$clean, function(x) eliminateDuplicated(x))
tags.unique <- unique(tags.df$clean.unique)
tags.vector.source <- VectorSource(x=tags.unique)
tags.corpus <- VCorpus(tags.vector.source,
readerControl=list(language="es"))
tags.cleaned <- cleaningCorpus(tags.corpus)
tags.cleaned.char <- character()
for(i in 1:length(tags.unique)){
tags.cleaned.char <- rbind(tags.cleaned.char, content(tags.cleaned[[i]]))
}
unique.tags.df.cleaned <- as.character(unique(tags.cleaned.char))
tags.cleaned.source <- VectorSource(x=unique.tags.df.cleaned)
tags.cleaned.corpus <- VCorpus(tags.cleaned.source,
readerControl=list(language="es"))
tags.matrix <- TermDocumentMatrix(tags.cleaned.corpus)
tags.df.matrix <- data.frame(rownames(tags.matrix),
inspect(tags.matrix),
row.names=NULL,
stringsAsFactors=F)
names(tags.df.matrix) <- c("term",paste0("doc",colnames(tags.matrix)))
save(tags.df.matrix, file="../tags.df.matrix.RData")
cleaningCorpus <- function(volatil.corpus){
#eliminate punctuation
without_punctuation <- tm_map(volatil.corpus, removePunctuation)
#eliminate numbers
without_numbers <- tm_map(without_punctuation, removeNumbers)
#eliminate stopwords
without_stopwords <- tm_map(without_numbers, removeWords, stopwords("spanish"))
#eliminate extra whitespaces
extra_whitespace <- tm_map(without_stopwords, stripWhitespace)
#to lower case
s_lower <- tm_map(extra_whitespace, content_transformer(tolower))
#stem each token
#s_steam <- tm_map(s_lower, stemDocument)
#s_steam
s_lower
}
json.tags <- read.csv("../tags-catalog.json", header=F,
sep="\n", stringsAsFactors=F, quote="\'")
#from json to character
tags <- apply(json.tags, 1, from.json)
#cleaning tags
tags.df <- data.frame(tags=tags)
tags.df$tags <- sapply(tags.df$tags, function(x) gsub("-"," ", x=x))
tags.df$clean <- sapply(tags.df$tags, function(x) gsub("\\."," ", x=x))
tags.df$clean.unique <- sapply(tags.df$clean, function(x) eliminateDuplicated(x))
tags.unique <- unique(tags.df$clean.unique)
tags.vector.source <- VectorSource(x=tags.unique)
tags.corpus <- VCorpus(tags.vector.source,
readerControl=list(language="es"))
content(tags.corpus[[1]])
volatil.corpus <- tags.corpus
content(volatil.corpus[[2000]])
tags.df[2000]
tags.df[,2000]
names(tags.df)
class(tags.df)
tags.df[1,1]
tags.df$tags[1]
head(tags)
head(tags.df$tags)
dim(tags.df)
1200*18.50
2402.66*18.5
dim(tags.df)
class(tags.cleaned)
inspect(tags.clenaed)
inspect(tags.cleaned)
2304*18.5
head(tags.cleaned.char)
duplicated(tags.cleaned.char)
which(duplicated(tags.cleaned.char))
tags.cleaned.char[c(889,890,891,1429,1430,1431)]
?duplicated
anyDuplicated(tags.cleaned.char)
tags.cleaned.char[890,1430]
tags.cleaned.char[c(890,1430)]
setwd("~/itam/tesis")
source("../auxiliary_functions.R")
setwd("~/itam/tesis/shinyApp_content")
source("../auxiliary_functions.R")
from.json <- function(x) {
line <- fromJSON(x)
line$internalName
}
json.tags <- read.csv("../tags-catalog.json", header=F,
sep="\n", stringsAsFactors=F, quote="\'")
#from json to character
tags <- apply(json.tags, 1, from.json)
#cleaning tags
tags.df <- data.frame(tags=tags)
tags.df$tags <- sapply(tags.df$tags, function(x) gsub("-"," ", x=x))
tags.df$clean <- sapply(tags.df$tags, function(x) gsub("\\."," ", x=x))
tags.df$clean.unique <- sapply(tags.df$clean, function(x) eliminateDuplicated(x))
tags.unique <- unique(tags.df$clean.unique)
tags.vector.source <- VectorSource(x=tags.unique)
tags.corpus <- VCorpus(tags.vector.source,
readerControl=list(language="es"))
tags.cleaned <- cleaningCorpus(tags.corpus)
# tags.cleaned.char <- character()
# for(i in 1:length(tags.unique)){
#   tags.cleaned.char <- rbind(tags.cleaned.char, content(tags.cleaned[[i]]))
# }
#
# unique.tags.df.cleaned <- as.character(unique(tags.cleaned.char))
#
# tags.cleaned.source <- VectorSource(x=unique.tags.df.cleaned)
#
# tags.cleaned.corpus <- VCorpus(tags.cleaned.source,
#                                readerControl=list(language="es"))
#
tags.matrix <- TermDocumentMatrix(tags.cleaned)
shiny::runApp()
shiny::runApp()
suppressPackageStartupMessages(library(tm))
suppressPackageStartupMessages(library(rjson))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(stringr))
source("../auxiliary_functions.R")
#####################################
####tags
from.json <- function(x) {
line <- fromJSON(x)
line$internalName
}
json.tags <- read.csv("../tags-catalog.json", header=F,
sep="\n", stringsAsFactors=F, quote="\'")
#from json to character
tags <- apply(json.tags, 1, from.json)
#cleaning tags
tags.df <- data.frame(tags=tags)
tags.df$tags <- sapply(tags.df$tags, function(x) gsub("-"," ", x=x))
tags.df$clean <- sapply(tags.df$tags, function(x) gsub("\\."," ", x=x))
tags.df$clean.unique <- sapply(tags.df$clean, function(x) eliminateDuplicated(x))
tags.unique <- unique(tags.df$clean.unique)
tags.vector.source <- VectorSource(x=tags.unique)
tags.corpus <- VCorpus(tags.vector.source,
readerControl=list(language="es"))
tags.cleaned <- cleaningCorpus(tags.corpus)
tags.matrix <- TermDocumentMatrix(tags.cleaned)
tags.df.matrix <- data.frame(rownames(tags.matrix),
inspect(tags.matrix),
row.names=NULL,
stringsAsFactors=F)
names(tags.df.matrix) <- c("term",paste0("doc",colnames(tags.matrix)))
save(tags.df.matrix, file="../tags.df.matrix.RData")
shiny::runApp()
shiny::runApp()
